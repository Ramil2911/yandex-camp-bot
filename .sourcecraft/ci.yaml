on:
  pull_request:
    - workflows: [deploy-all-services]
      filter:
        source_branches: [""]
        target_branches: ["master"]

    - workflows: [deploy-rag-service]
      filter:
        source_branches: [""]
        target_branches: ["master"]
        paths: ["yandex-camp-bot/rag-service/**"]

  push:
    - workflows: [deploy-all-services]
      filter:
        branches: ["master"]

    - workflows: [deploy-rag-service]
      filter:
        branches: ["master"]
        paths: ["yandex-camp-bot/rag-service/**"]

workflows:
  deploy-all-services:
    tasks:
      - deploy-regular-services

  deploy-rag-service:
    tasks:
      - deploy-rag-only

tasks:
  - name: deploy-regular-services
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      REGISTRY_ID: ${{ secrets.REGISTRY_ID }}
      SERVICE_ACCOUNT_ID: ${{ secrets.SERVICE_ACCOUNT_ID }}
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      YC_OPENAI_TOKEN: ${{ secrets.YC_OPENAI_TOKEN }}
      YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SECURITY_SERVICE_URL: ${{ secrets.SECURITY_SERVICE_URL }}
      RAG_SERVICE_URL: ${{ secrets.RAG_SERVICE_URL }}
      DIALOGUE_SERVICE_URL: ${{ secrets.DIALOGUE_SERVICE_URL }}
      MONITORING_SERVICE_URL: ${{ secrets.MONITORING_SERVICE_URL }}
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
    cubes:
      - name: build-push-deploy-regular
        script: 
          - |
            # Настраиваем SSH в той же задаче
            mkdir -p ~/.ssh
            echo "$SSH_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "" >> ~/.ssh/id_rsa
            ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
            
            services=("api-gateway" "monitoring-service" "dialogue-service" "security-service")
            
            for service in "${services[@]}"; do
              echo "Deploying $service..."
              
              # Определяем переменные окружения для каждого сервиса
              case $service in
                "api-gateway")
                  ENV_VARS="PYTHONPATH=/app:/app/common,TG_BOT_TOKEN=$TG_BOT_TOKEN,SECURITY_SERVICE_URL=$SECURITY_SERVICE_URL,RAG_SERVICE_URL=$RAG_SERVICE_URL,DIALOGUE_SERVICE_URL=$DIALOGUE_SERVICE_URL,MONITORING_SERVICE_URL=$MONITORING_SERVICE_URL,WEBHOOK_URL=$WEBHOOK_URL"
                  ;;
                "security-service")
                  ENV_VARS="PYTHONPATH=/app:/app/common,YC_OPENAI_TOKEN=$YC_OPENAI_TOKEN,YC_FOLDER_ID=$YC_FOLDER_ID,MONITORING_SERVICE_URL=$MONITORING_SERVICE_URL"
                  ;;
                "dialogue-service")
                  ENV_VARS="PYTHONPATH=/app:/app/common,YC_OPENAI_TOKEN=$YC_OPENAI_TOKEN,YC_FOLDER_ID=$YC_FOLDER_ID,RAG_SERVICE_URL=$RAG_SERVICE_URL,MONITORING_SERVICE_URL=$MONITORING_SERVICE_URL"
                  ;;
                "monitoring-service")
                  ENV_VARS="PYTHONPATH=/app:/app/common,DATABASE_URL=$DATABASE_URL"
                  ;;
                *)
                  ENV_VARS="PYTHONPATH=/app:/app/common"
                  ;;
              esac
              
              ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "
                # Добавляем пути к yc и docker-credential-yc
                export PATH=\$PATH:/home/yandexcamp/yandex-cloud/bin
                cd /home/yandexcamp/yandex-camp-bot/yandex-camp-bot && \
                docker build -t cr.yandex/$REGISTRY_ID/$service:latest -f $service/Dockerfile . && \
                docker push cr.yandex/$REGISTRY_ID/$service:latest && \
                /home/yandexcamp/yandex-cloud/bin/yc serverless container revision deploy \
                  --container-name $service \
                  --image cr.yandex/$REGISTRY_ID/$service:latest \
                  --service-account-id $SERVICE_ACCOUNT_ID \
                  --environment $ENV_VARS
              "
              echo "Finished deploying $service"
            done
            
            echo "Regular services deployed successfully!"

  - name: deploy-rag-only
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      REGISTRY_ID: ${{ secrets.REGISTRY_ID }}
      SERVICE_ACCOUNT_ID: ${{ secrets.SERVICE_ACCOUNT_ID }}
      MONITORING_SERVICE_URL: ${{ secrets.MONITORING_SERVICE_URL }}
    cubes:
      - name: build-push-deploy-rag
        script: 
          - |
            # Настраиваем SSH в той же задаче
            mkdir -p ~/.ssh
            echo "$SSH_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "" >> ~/.ssh/id_rsa
            ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
            
            echo "Deploying rag-service..."
            # Переменные окружения для RAG сервиса
            RAG_ENV_VARS="PYTHONPATH=/app:/app/common,MONITORING_SERVICE_URL=$MONITORING_SERVICE_URL"
            
            ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "
              # Добавляем пути к yc и docker-credential-yc
              export PATH=\$PATH:/home/yandexcamp/yandex-cloud/bin
              cd /home/yandexcamp/yandex-camp-bot/yandex-camp-bot && \
              docker build -t cr.yandex/$REGISTRY_ID/rag-service:latest -f rag-service/Dockerfile . && \
              docker push cr.yandex/$REGISTRY_ID/rag-service:latest && \
              /home/yandexcamp/yandex-cloud/bin/yc serverless container revision deploy \
                --container-name rag-service \
                --image cr.yandex/$REGISTRY_ID/rag-service:latest \
                --service-account-id $SERVICE_ACCOUNT_ID \
                --environment $RAG_ENV_VARS
            "
            echo "Finished deploying rag-service"