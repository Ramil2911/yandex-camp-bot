on:
  pull_request:
    - workflows: [deploy-all-services]
      filter:
        source_branches: [""]
        target_branches: ["master"]

    - workflows: [deploy-rag-service]
      filter:
        source_branches: [""]
        target_branches: ["master"]
        paths: ["yandex-camp-bot/rag-service/**"]

  push:
    - workflows: [deploy-all-services]
      filter:
        branches: ["master"]

    - workflows: [deploy-rag-service]
      filter:
        branches: ["master"]
        paths: ["yandex-camp-bot/rag-service/**"]

workflows:
  deploy-all-services:
    tasks:
      - deploy-regular-services

  deploy-rag-service:
    tasks:
      - deploy-rag-only

tasks:
  - name: deploy-regular-services
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      REGISTRY_ID: ${{ secrets.REGISTRY_ID }}
      SERVICE_ACCOUNT_ID: ${{ secrets.SERVICE_ACCOUNT_ID }}
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      YC_OPENAI_TOKEN: ${{ secrets.YC_OPENAI_TOKEN }}
      YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SECURITY_SERVICE_URL: ${{ secrets.SECURITY_SERVICE_URL }}
      RAG_SERVICE_URL: ${{ secrets.RAG_SERVICE_URL }}
      DIALOGUE_SERVICE_URL: ${{ secrets.DIALOGUE_SERVICE_URL }}
      MONITORING_SERVICE_URL: ${{ secrets.MONITORING_SERVICE_URL }}
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
      GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
      GIT_REPO_URL: ${{ secrets.GIT_REPO_URL }}
    cubes:
      - name: build-push-deploy-regular
        script: 
          - |
            # Настраиваем SSH
            mkdir -p ~/.ssh
            echo "$SSH_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "" >> ~/.ssh/id_rsa
            ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
            
            # Выполняем все в одной SSH сессии
            ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "
              # Добавляем пути
              export PATH=\$PATH:/home/yandexcamp/yandex-cloud/bin
              
              # Git pull
              cd /home/yandexcamp/yandex-camp-bot
              git config --global credential.helper 'store --file ~/.git-credentials'
              echo 'https://$GIT_USERNAME:$GIT_TOKEN@$GIT_REPO_URL' > ~/.git-credentials
              chmod 600 ~/.git-credentials
              git pull origin master
              echo 'Git pull completed successfully!'
              
              # Переходим в папку проекта
              cd yandex-camp-bot
              
              # Деплоим сервисы
              services=(\"api-gateway\" \"monitoring-service\" \"dialogue-service\" \"security-service\")
              
              for service in \"\${services[@]}\"; do
                echo \"Deploying \$service...\"
                
                # Определяем переменные окружения для каждого сервиса
                case \$service in
                  \"api-gateway\")
                    ENV_VARS=\"PYTHONPATH=/app:/app/common,TG_BOT_TOKEN=$TG_BOT_TOKEN,SECURITY_SERVICE_URL=$SECURITY_SERVICE_URL,RAG_SERVICE_URL=$RAG_SERVICE_URL,DIALOGUE_SERVICE_URL=$DIALOGUE_SERVICE_URL,MONITORING_SERVICE_URL=$MONITORING_SERVICE_URL,WEBHOOK_URL=$WEBHOOK_URL\"
                    MIN_INSTANCES=\"--min-instances 1\"
                    ;;
                  \"security-service\")
                    ENV_VARS=\"PYTHONPATH=/app:/app/common,YC_OPENAI_TOKEN=$YC_OPENAI_TOKEN,YC_FOLDER_ID=$YC_FOLDER_ID,MONITORING_SERVICE_URL=$MONITORING_SERVICE_URL\"
                    MIN_INSTANCES=\"\"
                    ;;
                  \"dialogue-service\")
                    ENV_VARS=\"PYTHONPATH=/app:/app/common,YC_OPENAI_TOKEN=$YC_OPENAI_TOKEN,YC_FOLDER_ID=$YC_FOLDER_ID,RAG_SERVICE_URL=$RAG_SERVICE_URL,MONITORING_SERVICE_URL=$MONITORING_SERVICE_URL\"
                    MIN_INSTANCES=\"\"
                    ;;
                  \"monitoring-service\")
                    ENV_VARS=\"PYTHONPATH=/app:/app/common,DATABASE_URL=$DATABASE_URL\"
                    MIN_INSTANCES=\"\"
                    ;;
                  *)
                    ENV_VARS=\"PYTHONPATH=/app:/app/common\"
                    MIN_INSTANCES=\"\"
                    ;;
                esac
                
                docker build -t cr.yandex/$REGISTRY_ID/\$service:latest -f \$service/Dockerfile .
                docker push cr.yandex/$REGISTRY_ID/\$service:latest
                yc serverless container revision deploy \\
                  --container-name \$service \\
                  --image cr.yandex/$REGISTRY_ID/\$service:latest \\
                  --service-account-id $SERVICE_ACCOUNT_ID \\
                  --environment \"\$ENV_VARS\" \\
                  --network-id enpuchvm6q14i7nvk8tq \\
                  --memory 512 \\
                  --execution-timeout 45s \\
                  \$MIN_INSTANCES \\
                  --async
                  
                echo \"Finished deploying \$service\"
              done
              
              echo \"Regular services deployed successfully!\"
            "

  - name: deploy-rag-only
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      REGISTRY_ID: ${{ secrets.REGISTRY_ID }}
      SERVICE_ACCOUNT_ID: ${{ secrets.SERVICE_ACCOUNT_ID }}
      MONITORING_SERVICE_URL: ${{ secrets.MONITORING_SERVICE_URL }}
      GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
      GIT_REPO_URL: ${{ secrets.GIT_REPO_URL }}
    cubes:
      - name: build-push-deploy-rag
        script: 
          - |
            # Настраиваем SSH
            mkdir -p ~/.ssh
            echo "$SSH_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "" >> ~/.ssh/id_rsa
            ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
            
            # Выполняем все в одной SSH сессии
            ssh -o StrictHostKeyChecking=no -o BatchMode=yes -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "
              # Добавляем пути
              export PATH=\$PATH:/home/yandexcamp/yandex-cloud/bin
              
              # Git pull
              cd /home/yandexcamp/yandex-camp-bot
              git config --global credential.helper 'store --file ~/.git-credentials'
              echo 'https://$GIT_USERNAME:$GIT_TOKEN@$GIT_REPO_URL' > ~/.git-credentials
              chmod 600 ~/.git-credentials
              git pull origin master
              echo 'Git pull completed successfully!'
              
              # Переходим в папку проекта
              cd yandex-camp-bot
              
              # Деплоим RAG сервис
              echo \"Deploying rag-service...\"
              
              docker build -t cr.yandex/$REGISTRY_ID/rag-service:latest -f rag-service/Dockerfile .
              docker push cr.yandex/$REGISTRY_ID/rag-service:latest
              yc serverless container revision deploy \\
                --container-name rag-service \\
                --image cr.yandex/$REGISTRY_ID/rag-service:latest \\
                --service-account-id $SERVICE_ACCOUNT_ID \\
                --environment \"PYTHONPATH=/app:/app/common,MONITORING_SERVICE_URL=$MONITORING_SERVICE_URL\" \\
                --network-id enpuchvm6q14i7nvk8tq \\
                --memory 512 \\
                --execution-timeout 45s \\
                --min-instances 1 \\
                --async
                
              echo \"Finished deploying rag-service\"
            "