from telegram import Update
from telegram.ext import ContextTypes

from app.utils.config import BOT_MESSAGES
from app.llms import dialogue_bot
from app.utils.log import logger, log_user_action, log_security_event, log_error, log_system_event
from app.chains import TelegramBotPipeline, TelegramAdapter

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–∞–π–ø–ª–∞–π–Ω–∞ –∏ –∞–¥–∞–ø—Ç–µ—Ä–∞
_bot_pipeline = None
_telegram_adapter = None


def get_pipeline_adapter():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∏ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    global _bot_pipeline, _telegram_adapter
    
    if _bot_pipeline is None:
        _bot_pipeline = TelegramBotPipeline(dialogue_bot)
        _telegram_adapter = TelegramAdapter(_bot_pipeline)
        logger.info("LangChain –ø–∞–π–ø–ª–∞–π–Ω –∏ –∞–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    return _bot_pipeline, _telegram_adapter


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    chat_id = str(update.effective_chat.id)
    username = update.effective_user.username or "unknown"

    log_user_action(user_id, chat_id, "start", f"@{username}")

    await update.message.reply_text(BOT_MESSAGES["start"])


async def clear_memory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    user_id = str(update.effective_user.id)
    session_id = str(update.effective_chat.id)
    username = update.effective_user.username or "unknown"

    log_user_action(user_id, session_id, "clear_memory", f"@{username}")
    dialogue_bot.clear_memory(session_id)
    await update.message.reply_text(BOT_MESSAGES["memory_cleared"])


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    user_id = str(update.effective_user.id)
    session_id = str(update.effective_chat.id)
    username = update.effective_user.username or "unknown"

    log_user_action(user_id, session_id, "help", f"@{username}")
    await update.message.reply_text(BOT_MESSAGES["help"])


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    user_id = str(update.effective_user.id)
    session_id = str(update.effective_chat.id)
    username = update.effective_user.username or "unknown"

    log_user_action(user_id, session_id, "stats", f"@{username}")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç LangChain –ø–∞–π–ø–ª–∞–π–Ω–∞
    pipeline, adapter = get_pipeline_adapter()
    pipeline_stats = pipeline.get_pipeline_stats()
    dialogue_stats = pipeline_stats.get("dialogue_bot_stats", {})

    stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (LangChain Pipeline)**

üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {dialogue_stats.get('total_requests', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {dialogue_stats.get('successful_requests', 0)}
‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {dialogue_stats.get('failed_requests', 0)}
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {dialogue_stats.get('malicious_requests', 0)}

‚ö° **–ü–∞–π–ø–ª–∞–π–Ω:**
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞: {pipeline_stats.get('pipeline_requests', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {pipeline_stats.get('pipeline_successes', 0)}
‚Ä¢ –û—à–∏–±–æ–∫: {pipeline_stats.get('pipeline_errors', 0)}
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {pipeline_stats.get('security_blocks', 0)}
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {pipeline_stats.get('moderator_blocks', 0)}

‚è±Ô∏è **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {dialogue_stats.get('average_response_time', 0):.2f}—Å
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–∞–π–ø–ª–∞–π–Ω–∞: {pipeline_stats.get('success_rate', 0):.1%}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞: {dialogue_stats.get('success_rate', 0):.1%}

üë• **–°–µ—Å—Å–∏–∏:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {dialogue_stats.get('active_sessions', 0)}
    """

    await update.message.reply_text(stats_text)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LangChain –ø–∞–π–ø–ª–∞–π–Ω"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –∏ –∞–¥–∞–ø—Ç–µ—Ä
        pipeline, adapter = get_pipeline_adapter()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ LangChain –ø–∞–π–ø–ª–∞–π–Ω
        response = await adapter.process_telegram_message(update, context)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(response)

    except Exception as e:
        # –§–æ–ª–±—ç–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        user_id = str(update.effective_user.id) if update.effective_user else "unknown"
        session_id = str(update.effective_chat.id) if update.effective_chat else "unknown"
        log_error(user_id, session_id, f"LangChain pipeline failed: {str(e)}")
        await update.message.reply_text(BOT_MESSAGES["error"])


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    user_id = str(update.effective_user.id) if update and update.effective_user else "unknown"
    session_id = str(update.effective_chat.id) if update and update.effective_chat else "unknown"
    username = update.effective_user.username if update and update.effective_user else "unknown"

    log_error(user_id, session_id, f"Telegram error: {str(context.error)}")

    if update and update.effective_message:
        await update.effective_message.reply_text(BOT_MESSAGES["telegram_error"])
