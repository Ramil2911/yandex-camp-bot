#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è category –≤ —Ç–∞–±–ª–∏—Ü—É errors
"""

import sys
import os
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é common
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from common.config import config

def migrate_database():
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    # –°–æ–∑–¥–∞–µ–º engine
    engine = create_engine(config.database_url, echo=True)

    try:
        with engine.connect() as conn:
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ category
            result = conn.execute(text("""
                SELECT column_name
                FROM information_schema.columns
                WHERE table_name = 'errors' AND column_name = 'category'
            """))

            if result.fetchone():
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'category' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É category
            print("üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'category' –≤ —Ç–∞–±–ª–∏—Ü—É 'errors'...")
            conn.execute(text("""
                ALTER TABLE errors
                ADD COLUMN category VARCHAR(20) DEFAULT 'technical'
            """))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏, –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É—è –∏—Ö
            print("üîç –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—à–∏–±–∫–∏...")
            conn.execute(text("""
                UPDATE errors
                SET category = 'security'
                WHERE LOWER(error_type || ' ' || error_message) LIKE LOWER('%unauthorized%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%forbidden%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%authentication%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%permission%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%access denied%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%security%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%auth%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%login%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%password%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%token%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%403%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%401%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%rate limit%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%suspicious%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%malicious%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%attack%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%intrusion%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%sql injection%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%xss%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%csrf%')
                   OR LOWER(error_type || ' ' || error_message) LIKE LOWER('%brute force%')
            """))

            conn.commit()
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = conn.execute(text("SELECT COUNT(*) FROM errors WHERE category = 'security'"))
            security_count = result.fetchone()[0]

            result = conn.execute(text("SELECT COUNT(*) FROM errors WHERE category = 'technical'"))
            technical_count = result.fetchone()[0]

            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
            print(f"   Security –æ—à–∏–±–æ–∫: {security_count}")
            print(f"   –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {technical_count}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö monitoring service")
    migrate_database()
    print("‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
