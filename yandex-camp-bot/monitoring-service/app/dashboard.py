import streamlit as st
import requests
import pandas as pd
from datetime import datetime, timedelta
import time
import socket
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MONITORING_SERVICE_URL = "http://localhost:8004"
REFRESH_INTERVAL = 30  # —Å–µ–∫—É–Ω–¥—ã

st.set_page_config(
    page_title="YandexCamp Monitoring Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üìä YandexCamp Monitoring Dashboard")

# –ö–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main() –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

def show_full_trace_details(full_trace: Dict[str, Any]):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–Ω–æ–º —Ç—Ä–µ–π—Å–µ"""
    if not full_trace:
        st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
    with st.expander("üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", expanded=False):
        st.write(f"–ö–ª—é—á–∏ –≤ –¥–∞–Ω–Ω—ã—Ö: {list(full_trace.keys())}")
        st.write(f"–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {full_trace}")

    st.subheader("üîç –ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å –∑–∞–ø—Ä–æ—Å–∞")

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    col1, col2, col3 = st.columns(3)
    with col1:
        request_id = full_trace.get("request_id", "N/A")
        st.metric("Request ID", request_id)
    with col2:
        trace_id = full_trace.get("trace_id", "N/A")
        st.metric("Trace ID", trace_id)
    with col3:
        status = full_trace.get("status", "N/A")
        st.metric("–°—Ç–∞—Ç—É—Å", status)

    # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    st.subheader("‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    start_time = full_trace.get("start_time")
    end_time = full_trace.get("end_time")
    duration = full_trace.get("total_duration")
    
    if start_time:
        st.write(f"**–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:** {start_time}")
    else:
        st.write("**–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:** N/A")
        
    if end_time:
        st.write(f"**–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {end_time}")
    else:
        st.write("**–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:** N/A")
        
    if duration:
        st.write(f"**–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {duration:.2f}ms")
    else:
        st.write("**–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** N/A")

    # –ü—É—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã
    st.subheader("üèóÔ∏è –ü—É—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã")
    services_path = full_trace.get("services_path", [])
    st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ø—É—Ç–∏:** {len(services_path)}")
    
    if services_path:
        st.write("**–î–∞–Ω–Ω—ã–µ –ø—É—Ç–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã:**")
        st.json(services_path)
        
        try:
            services_df = pd.DataFrame(services_path)
            if not services_df.empty:
                st.write("**–¢–∞–±–ª–∏—Ü–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:**")
                # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_cols = ["service", "operation", "duration", "status"]
                available_cols = [col for col in display_cols if col in services_df.columns]
                st.write(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {available_cols}")

                if available_cols:
                    st.dataframe(
                        services_df[available_cols],
                        use_container_width=True
                    )
                else:
                    st.write("**–í—Å–µ –∫–æ–ª–æ–Ω–∫–∏:**")
                    st.dataframe(services_df, use_container_width=True)
            else:
                st.warning("DataFrame –ø—É—Å—Ç–æ–π")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DataFrame: {str(e)}")
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—É—Ç–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã")

    # Timeline –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

    # –û—à–∏–±–∫–∏ –≤ —Ç—Ä–µ–π—Å–µ
    errors = full_trace.get("errors", [])
    st.subheader("üö® –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –≤ —Ç—Ä–µ–π—Å–µ")
    st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –≤ —Ç—Ä–µ–π—Å–µ:** {len(errors)}")
    
    if errors:
        st.write("**–î–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–∞—Ö:**")
        st.json(errors)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        try:
            errors_df = pd.DataFrame(errors)
            if not errors_df.empty:
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫ –≤ —Ç—Ä–µ–π—Å–µ", len(errors_df))
                with col2:
                    st.metric("–°–µ—Ä–≤–∏—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏", errors_df['service'].nunique() if 'service' in errors_df.columns else 0)
                with col3:
                    st.metric("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –æ—à–∏–±–æ–∫", errors_df['category'].nunique() if 'category' in errors_df.columns else 0)
                # –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –≤ —Ç—Ä–µ–π—Å–µ
                if not errors_df.empty:
                    st.subheader("üìã –í—Å–µ –æ—à–∏–±–∫–∏ –≤ —Ç—Ä–µ–π—Å–µ")
                    try:
                        display_cols = ['timestamp', 'service', 'error_type', 'category', 'error_message']
                        available_cols = [col for col in display_cols if col in errors_df.columns]
                        
                        if available_cols:
                            st.dataframe(
                                errors_df[available_cols].head(10),
                                use_container_width=True,
                                column_config={
                                    "timestamp": st.column_config.DatetimeColumn("–í—Ä–µ–º—è", format="DD.MM.YYYY HH:mm:ss"),
                                    "service": "–°–µ—Ä–≤–∏—Å",
                                    "error_type": "–¢–∏–ø –æ—à–∏–±–∫–∏",
                                    "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                                    "error_message": st.column_config.TextColumn("–°–æ–æ–±—â–µ–Ω–∏–µ", width="large"),
                                }
                            )
                        else:
                            st.dataframe(errors_df.head(10), use_container_width=True)
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –æ—à–∏–±–æ–∫: {str(e)}")

                # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–∏
                for i, error in enumerate(errors):
                    with st.expander(f"‚ùå –û—à–∏–±–∫–∞ {i+1}: {error.get('service')} - {error.get('error_type')} - {error.get('category', 'unknown')}"):
                        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**üïí –í—Ä–µ–º—è:** {error.get('timestamp', 'N/A')}")
                            st.write(f"**üè¢ –°–µ—Ä–≤–∏—Å:** {error.get('service', 'N/A')}")
                            st.write(f"**‚ö†Ô∏è –¢–∏–ø –æ—à–∏–±–∫–∏:** {error.get('error_type', 'N/A')}")
                            st.write(f"**üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {error.get('category', 'N/A')}")

                        with col2:
                            st.write(f"**üÜî Trace ID:** `{error.get('trace_id', 'N/A')}`")
                            st.write(f"**üìù Request ID:** `{error.get('request_id', 'N/A')}`")

                        # –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                        st.subheader("üìÑ –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
                        message = error.get('error_message', '')
                        if len(message) > 300:
                            st.text_area(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ {i+1}", message, height=100, disabled=True, key=f"error_msg_{i}")
                        else:
                            st.code(message, language="text")

                        # Stack trace
                        if error.get("stack_trace"):
                            with st.expander("üìÑ Stack Trace"):
                                st.code(error.get("stack_trace", ""), language="text")

                        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
                        if error.get("context"):
                            with st.expander("üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏"):
                                st.json(error.get("context", {}))

                        # –°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        if error.get("user_id") or error.get("session_id"):
                            st.subheader("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                            col1, col2 = st.columns(2)
                            with col1:
                                st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {error.get('user_id', 'N/A')}")
                            with col2:
                                st.write(f"**–°–µ—Å—Å–∏—è:** {error.get('session_id', 'N/A')}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫: {str(e)}")
    else:
        st.info("–í —ç—Ç–æ–º —Ç—Ä–µ–π—Å–µ –Ω–µ—Ç –æ—à–∏–±–æ–∫")


def show_error_details(errors_data, error_category):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö"""
    if not errors_data:
        st.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {error_category} –æ—à–∏–±–∫–∏")
        return

    df_errors = pd.DataFrame(errors_data)
    if df_errors.empty:
        st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ {error_category} –æ—à–∏–±–∫–∞—Ö")
        return

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    display_cols = ['timestamp', 'service', 'error_type', 'error_message', 'trace_id', 'request_id', 'user_id', 'session_id']
    available_cols = [col for col in display_cols if col in df_errors.columns]

    if available_cols:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∫—Ä–∞—Ç–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        if 'error_message' in df_errors.columns:
            df_errors['short_message'] = df_errors['error_message'].str[:100] + '...'

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        column_config = {
            "timestamp": st.column_config.DatetimeColumn("–í—Ä–µ–º—è", format="DD.MM.YYYY HH:mm:ss"),
            "service": st.column_config.TextColumn("–°–µ—Ä–≤–∏—Å", width="small"),
            "error_type": st.column_config.TextColumn("–¢–∏–ø –æ—à–∏–±–∫–∏", width="medium"),
            "error_message": st.column_config.TextColumn("–°–æ–æ–±—â–µ–Ω–∏–µ", width="large"),
            "short_message": st.column_config.TextColumn("–°–æ–æ–±—â–µ–Ω–∏–µ", width="large"),
            "trace_id": st.column_config.TextColumn("Trace ID", width="medium"),
            "request_id": st.column_config.TextColumn("Request ID", width="medium"),
            "user_id": st.column_config.TextColumn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", width="small"),
            "session_id": st.column_config.TextColumn("–°–µ—Å—Å–∏—è", width="small"),
        }

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            df_errors[available_cols].head(10),
            use_container_width=True,
            column_config=column_config
        )

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
        if len(df_errors) > 0:
            selected_error_idx = st.selectbox(
                f"–í—ã–±–µ—Ä–∏—Ç–µ {error_category} –æ—à–∏–±–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
                range(len(df_errors.head(10))),
                format_func=lambda x: f"{df_errors.iloc[x]['service']} - {df_errors.iloc[x]['error_type']} - {df_errors.iloc[x]['error_message'][:50]}...",
                key=f"{error_category}_error_select"
            )

            if selected_error_idx is not None:
                selected_error = df_errors.iloc[selected_error_idx]
                show_detailed_error_analysis(selected_error, error_category)


def show_detailed_security_violation(violation):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    with st.expander("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", expanded=True):
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            st.write(f"**üïí –í—Ä–µ–º—è:** {violation.get('timestamp', 'N/A')}")
            st.write(f"**üè¢ –°–µ—Ä–≤–∏—Å:** {violation.get('service', 'N/A')}")
            st.write(f"**‚ö†Ô∏è –¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è:** {violation.get('error_type', 'N/A')}")
            st.write(f"**üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {violation.get('user_id', 'N/A')}")
            st.write(f"**üîë –°–µ—Å—Å–∏—è:** {violation.get('session_id', 'N/A')}")
        
        with col2:
            st.subheader("üîó –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã")
            st.write(f"**üÜî Trace ID:** `{violation.get('trace_id', 'N/A')}`")
            st.write(f"**üìù Request ID:** `{violation.get('request_id', 'N/A')}`")
            st.write(f"**üóÇÔ∏è ID –∑–∞–ø–∏—Å–∏:** {violation.get('id', 'N/A')}")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
        st.subheader("üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏")
        if violation.get('error_message'):
            message = violation.get('error_message', '')
            if len(message) > 500:
                st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏", message, height=150, disabled=True)
            else:
                st.code(message, language="text")
        else:
            st.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è
        if violation.get('context'):
            st.subheader("üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è")
            context = violation.get('context', {})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if 'user_message' in context:
                st.write(f"**üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {context['user_message']}")
            
            if 'category' in context:
                st.write(f"**üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {context['category']}")
            
            if 'confidence' in context:
                st.write(f"**üéØ –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:** {context['confidence']:.2f}")
            
            if 'processing_time' in context:
                st.write(f"**‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {context['processing_time']:.3f}—Å")
            
            if 'heuristic_check' in context:
                st.write(f"**üîç –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:** {'–î–∞' if context['heuristic_check'] else '–ù–µ—Ç'}")
            
            if 'llm_available' in context:
                st.write(f"**ü§ñ LLM –¥–æ—Å—Ç—É–ø–µ–Ω:** {'–î–∞' if context['llm_available'] else '–ù–µ—Ç'}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ expander
            with st.expander("üìÑ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"):
                st.json(context)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if violation.get('trace_id'):
                if st.button("üîç –ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å", key=f"full_trace_violation_{violation.get('trace_id')}"):
                    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–∞..."):
                        full_trace = get_full_trace(violation.get('trace_id'))
                        if full_trace:
                            show_full_trace_details(full_trace)
                        else:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–π—Å–∞")
        
        with col2:
            if violation.get('request_id'):
                if st.button("üìã –í—Å–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–æ Request", key=f"request_violations_{violation.get('request_id')}"):
                    show_request_related_violations(violation.get('request_id'))
        
        with col3:
            if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø—É", key=f"violation_type_stats_{violation.get('error_type')}"):
                show_violation_type_statistics(violation.get('error_type'))


def show_request_related_violations(request_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º request_id"""
    if not request_id:
        st.error("Request ID –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/security/violations?request_id={request_id}", timeout=5)
        if response.status_code == 200:
            related_violations = response.json()
            if related_violations:
                st.subheader(f"üîí –í—Å–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Request ID: {request_id}")
                
                for i, violation in enumerate(related_violations):
                    with st.expander(f"–ù–∞—Ä—É—à–µ–Ω–∏–µ {i+1}: {violation.get('service')} - {violation.get('error_type')}"):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**–í—Ä–µ–º—è:** {violation.get('timestamp')}")
                            st.write(f"**–°–µ—Ä–≤–∏—Å:** {violation.get('service')}")
                        with col2:
                            st.write(f"**–¢–∏–ø:** {violation.get('error_type')}")
                            st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {violation.get('user_id')}")
                        
                        st.write(f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {violation.get('error_message')}")
                        
                        if violation.get('context'):
                            st.json(violation.get('context'))
            else:
                st.info(f"–î–ª—è Request ID {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥—Ä—É–≥–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


def show_violation_type_statistics(error_type):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø—É –Ω–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    if not error_type:
        st.error("–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/security/violations?error_type={error_type}&hours=24", timeout=5)
        if response.status_code == 200:
            type_violations = response.json()
            if type_violations:
                st.subheader(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø—É –Ω–∞—Ä—É—à–µ–Ω–∏—è: {error_type}")
                
                df_stats = pd.DataFrame(type_violations)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
                if 'service' in df_stats.columns:
                    service_counts = df_stats['service'].value_counts()
                    st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:**")
                    for service, count in service_counts.items():
                        st.write(f"- {service}: {count} –Ω–∞—Ä—É—à–µ–Ω–∏–π")

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                if 'timestamp' in df_stats.columns:
                    df_stats['hour'] = pd.to_datetime(df_stats['timestamp']).dt.hour
                    hourly_counts = df_stats['hour'].value_counts().sort_index()
                    st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º:**")
                    for hour, count in hourly_counts.items():
                        st.write(f"- {hour:02d}:00: {count} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π", len(type_violations))
                with col2:
                    st.metric("–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤", df_stats['service'].nunique() if 'service' in df_stats.columns else 0)
                with col3:
                    st.metric("–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", df_stats['user_id'].nunique() if 'user_id' in df_stats.columns else 0)
                
                # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                if 'context' in df_stats.columns:
                    st.subheader("üìã –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π")
                    
                    # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    categories = []
                    confidences = []
                    for ctx in df_stats['context']:
                        if isinstance(ctx, dict):
                            if 'category' in ctx:
                                categories.append(ctx['category'])
                            if 'confidence' in ctx:
                                confidences.append(ctx['confidence'])
                    
                    if categories:
                        category_counts = pd.Series(categories).value_counts()
                        st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**")
                        for category, count in category_counts.items():
                            st.write(f"- {category}: {count} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
                    
                    if confidences:
                        st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:**")
                        conf_series = pd.Series(confidences)
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", f"{conf_series.mean():.2f}")
                        with col2:
                            st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", f"{conf_series.min():.2f}")
                        with col3:
                            st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", f"{conf_series.max():.2f}")
                
            else:
                st.info(f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Ç–∏–ø–∞ {error_type}")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


def show_detailed_error_analysis(error, error_category):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏"""
    with st.expander("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏", expanded=True):

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            st.write(f"**üïí –í—Ä–µ–º—è:** {error.get('timestamp', 'N/A')}")
            st.write(f"**üè¢ –°–µ—Ä–≤–∏—Å:** {error.get('service', 'N/A')}")
            st.write(f"**‚ö†Ô∏è –¢–∏–ø –æ—à–∏–±–∫–∏:** {error.get('error_type', 'N/A')}")
            st.write(f"**üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {error_category}")
            st.write(f"**üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {error.get('user_id', 'N/A')}")
            st.write(f"**üîë –°–µ—Å—Å–∏—è:** {error.get('session_id', 'N/A')}")

        with col2:
            st.subheader("üîó –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã")
            st.write(f"**üÜî Trace ID:** `{error.get('trace_id', 'N/A')}`")
            st.write(f"**üìù Request ID:** `{error.get('request_id', 'N/A')}`")
            st.write(f"**üóÇÔ∏è ID –∑–∞–ø–∏—Å–∏:** {error.get('id', 'N/A')}")

        # –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        st.subheader("üìÑ –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
        if error.get('error_message'):
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            message = error.get('error_message', '')
            if len(message) > 500:
                st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ", message, height=150, disabled=True)
            else:
                st.code(message, language="text")
        else:
            st.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        col1, col2, col3 = st.columns(3)

        with col1:
            if error.get('trace_id'):
                if st.button("üîç –ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å", key=f"full_trace_{error.get('trace_id')}_{error_category}"):
                    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–∞..."):
                        full_trace = get_full_trace(error.get('trace_id'))
                        if full_trace:
                            show_full_trace_details(full_trace)
                        else:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–π—Å–∞")

        with col2:
            if error.get('request_id'):
                if st.button("üìã –í—Å–µ –æ—à–∏–±–∫–∏ –ø–æ Request", key=f"request_errors_{error.get('request_id')}_{error_category}"):
                    show_request_related_errors(error.get('request_id'))

        with col3:
            if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø—É", key=f"type_stats_{error.get('error_type')}_{error_category}"):
                show_error_type_statistics(error.get('error_type'))

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if error.get('stack_trace') or error.get('context'):
            st.subheader("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

            if error.get('stack_trace'):
                with st.expander("üìÑ Stack Trace"):
                    st.code(error.get('stack_trace', ''), language="text")

            if error.get('context'):
                with st.expander("üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏"):
                    st.json(error.get('context', {}))


def show_request_related_errors(request_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º request_id"""
    if not request_id:
        st.error("Request ID –Ω–µ —É–∫–∞–∑–∞–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –ø–æ request_id
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/errors?request_id={request_id}", timeout=5)
        if response.status_code == 200:
            related_errors = response.json()
            if related_errors:
                st.subheader(f"üö® –í—Å–µ –æ—à–∏–±–∫–∏ –¥–ª—è Request ID: {request_id}")

                for i, error in enumerate(related_errors):
                    with st.expander(f"–û—à–∏–±–∫–∞ {i+1}: {error.get('service')} - {error.get('error_type')}"):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**–í—Ä–µ–º—è:** {error.get('timestamp')}")
                            st.write(f"**–°–µ—Ä–≤–∏—Å:** {error.get('service')}")
                        with col2:
                            st.write(f"**–¢–∏–ø:** {error.get('error_type')}")
                            st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {error.get('category')}")

                        st.write(f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {error.get('error_message')}")

                        if error.get('stack_trace'):
                            st.code(error.get('stack_trace'), language="text")
            else:
                st.info(f"–î–ª—è Request ID {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–∞—Ö")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


def show_error_type_statistics(error_type):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏"""
    if not error_type:
        st.error("–¢–∏–ø –æ—à–∏–±–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/errors?error_type={error_type}&start_date={datetime.now() - timedelta(hours=24)}", timeout=5)
        if response.status_code == 200:
            type_errors = response.json()
            if type_errors:
                st.subheader(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏: {error_type}")

                df_stats = pd.DataFrame(type_errors)

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
                if 'service' in df_stats.columns:
                    service_counts = df_stats['service'].value_counts()
                    st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:**")
                    for service, count in service_counts.items():
                        st.write(f"- {service}: {count} –æ—à–∏–±–æ–∫")

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                if 'timestamp' in df_stats.columns:
                    df_stats['hour'] = pd.to_datetime(df_stats['timestamp']).dt.hour
                    hourly_counts = df_stats['hour'].value_counts().sort_index()
                    st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º:**")
                    for hour, count in hourly_counts.items():
                        st.write(f"- {hour:02d}:00: {count} –æ—à–∏–±–æ–∫")

                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫", len(type_errors))
                with col2:
                    st.metric("–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤", df_stats['service'].nunique() if 'service' in df_stats.columns else 0)
                with col3:
                    st.metric("–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", df_stats['user_id'].nunique() if 'user_id' in df_stats.columns else 0)

            else:
                st.info(f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫ —Ç–∏–ø–∞ {error_type}")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


def show_error_statistics(all_errors):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—à–∏–±–∫–∞–º"""
    if not all_errors:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return

    df_errors = pd.DataFrame(all_errors)
    if df_errors.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫", len(df_errors))

    with col2:
        st.metric("–¢–∏–ø–æ–≤ –æ—à–∏–±–æ–∫", df_errors['error_type'].nunique() if 'error_type' in df_errors.columns else 0)

    with col3:
        st.metric("–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤", df_errors['service'].nunique() if 'service' in df_errors.columns else 0)

    with col4:
        st.metric("–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", df_errors['user_id'].nunique() if 'user_id' in df_errors.columns else 0)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º
    if 'error_type' in df_errors.columns:
        st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫")
        error_type_counts = df_errors['error_type'].value_counts()
        for error_type, count in error_type_counts.items():
            st.write(f"- {error_type}: {count} —Å–ª—É—á–∞–µ–≤")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
    if 'service' in df_errors.columns:
        st.subheader("üè¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º")
        service_counts = df_errors['service'].value_counts()
        for service, count in service_counts.items():
            st.write(f"- {service}: {count} –æ—à–∏–±–æ–∫")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if 'timestamp' in df_errors.columns:
        st.subheader("‚è∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        df_errors['hour'] = pd.to_datetime(df_errors['timestamp']).dt.hour
        hourly_counts = df_errors['hour'].value_counts().sort_index()
        for hour, count in hourly_counts.items():
            st.write(f"- {hour:02d}:00: {count} –æ—à–∏–±–æ–∫")

    # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    if 'service' in df_errors.columns and 'error_type' in df_errors.columns:
        st.subheader("üî• –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–µ—Ä–≤–∏—Å-–æ—à–∏–±–∫–∞")
        service_error_counts = df_errors.groupby(['service', 'error_type']).size().reset_index(name='count')
        service_error_counts = service_error_counts.sort_values('count', ascending=False).head(10)

        st.dataframe(
            service_error_counts,
            column_config={
                "service": "–°–µ—Ä–≤–∏—Å",
                "error_type": "–¢–∏–ø –æ—à–∏–±–∫–∏",
                "count": st.column_config.NumberColumn("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", format="%d")
            },
            use_container_width=True
        )


# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
@st.cache_data(ttl=REFRESH_INTERVAL)
def get_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/stats", timeout=5)
        if response.status_code == 200:
            return response.json()
        return {}
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return {}

@st.cache_data(ttl=REFRESH_INTERVAL)
def get_traces_count(hours: int = 24) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–π—Å–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/metrics/traces/count?hours={hours}", timeout=5)
        if response.status_code == 200:
            return response.json()
        return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return []

@st.cache_data(ttl=REFRESH_INTERVAL)
def get_errors_count(hours: int = 24) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/metrics/errors/count?hours={hours}", timeout=5)
        if response.status_code == 200:
            return response.json()
        return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return []


@st.cache_data(ttl=REFRESH_INTERVAL)
def get_errors_count_by_category(hours: int = 24) -> Dict[str, List[Dict[str, Any]]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    try:
        security_response = requests.get(f"{MONITORING_SERVICE_URL}/metrics/errors/count?hours={hours}&error_type=security", timeout=5)
        technical_response = requests.get(f"{MONITORING_SERVICE_URL}/metrics/errors/count?hours={hours}&error_type=technical", timeout=5)

        return {
            "security": security_response.json() if security_response.status_code == 200 else [],
            "technical": technical_response.json() if technical_response.status_code == 200 else []
        }
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {str(e)}")
        return {"security": [], "technical": []}

@st.cache_data(ttl=REFRESH_INTERVAL)
def get_performance_data(hours: int = 24) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/metrics/performance?hours={hours}", timeout=5)
        if response.status_code == 200:
            return response.json()
        return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return []

@st.cache_data(ttl=REFRESH_INTERVAL)
def get_services_summary(hours: int = 24) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º"""
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/metrics/services/summary?hours={hours}", timeout=5)
        if response.status_code == 200:
            return response.json()
        return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return []

@st.cache_data(ttl=REFRESH_INTERVAL)
def get_recent_traces(limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–π—Å—ã"""
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/traces?limit={limit}", timeout=5)
        if response.status_code == 200:
            return response.json()
        return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return []

@st.cache_data(ttl=REFRESH_INTERVAL)
def get_recent_errors(limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/errors?limit={limit}", timeout=5)
        if response.status_code == 200:
            return response.json()
        return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return []


@st.cache_data(ttl=REFRESH_INTERVAL)
def get_security_violations(limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/security/violations?limit={limit}", timeout=5)
        if response.status_code == 200:
            return response.json()
        return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return []

@st.cache_data(ttl=REFRESH_INTERVAL)
def get_security_violations_stats(hours: int = 24) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞—Ä—É—à–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/security/violations/stats?hours={hours}", timeout=5)
        if response.status_code == 200:
            return response.json()
        return {}
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return {}

@st.cache_data(ttl=REFRESH_INTERVAL)
def get_security_errors(limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ security –æ—à–∏–±–∫–∏ (legacy)"""
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/errors?category=security&limit={limit}", timeout=5)
        if response.status_code == 200:
            return response.json()
        return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return []


@st.cache_data(ttl=REFRESH_INTERVAL)
def get_technical_errors(limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"""
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/errors/technical?limit={limit}", timeout=5)
        if response.status_code == 200:
            return response.json()
        return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return []

@st.cache_data(ttl=REFRESH_INTERVAL)
def get_errors_stats(hours: int = 24) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫"""
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/errors/stats?hours={hours}", timeout=5)
        if response.status_code == 200:
            return response.json()
        return {}
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return {}


def get_full_trace(trace_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å –æ—à–∏–±–∫–∏"""
    try:
        response = requests.get(f"{MONITORING_SERVICE_URL}/trace/{trace_id}/full", timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            return data
        elif response.status_code == 404:
            st.error(f"–¢—Ä–µ–π—Å —Å ID {trace_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}
        else:
            st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–π—Å–∞: {response.status_code}")
            try:
                error_detail = response.json()
                st.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_detail}")
            except Exception as e:
                st.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return {}
    except requests.exceptions.Timeout:
        st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–π—Å–∞")
        return {}
    except requests.exceptions.ConnectionError:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        return {}
    except Exception as e:
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–π—Å–∞: {str(e)}")
        return {}

@st.cache_data(ttl=30)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è health checks
def get_services_health() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å health check –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    services = [
        {"name": "API Gateway", "url": "http://api-gateway:8000/health", "port": 8000, "type": "http"},
        {"name": "Security Service", "url": "http://security-service:8001/health", "port": 8001, "type": "http"},
        {"name": "RAG Service", "url": "http://rag-service:8002/health", "port": 8002, "type": "http"},
        {"name": "Dialogue Service", "url": "http://dialogue-service:8003/health", "port": 8003, "type": "http"},
        {"name": "Monitoring Service", "url": "http://monitoring-service:8004/health", "port": 8004, "type": "http"},
        {"name": "Redis", "host": "redis", "port": 6379, "type": "tcp"},
        {"name": "PostgreSQL", "host": "db", "port": 5432, "type": "tcp"}
    ]

    health_statuses = []

    for service in services:
        try:
            if service["type"] == "tcp":
                # –î–ª—è TCP —Å–µ—Ä–≤–∏—Å–æ–≤ (Redis, PostgreSQL) –∏—Å–ø–æ–ª—å–∑—É–µ–º socket check
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(2)
                start_time = time.time()
                result = sock.connect_ex((service["host"], service["port"]))
                response_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                sock.close()
                is_healthy = result == 0
            else:
                # –î–ª—è HTTP —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–µ–ª–∞–µ–º GET –∑–∞–ø—Ä–æ—Å
                start_time = time.time()
                response = requests.get(service["url"], timeout=3)
                response_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                is_healthy = response.status_code == 200

            health_statuses.append({
                "service": service["name"],
                "status": "healthy" if is_healthy else "unhealthy",
                "response_time": f"{response_time:.1f}ms" if response_time else "N/A",
                "port": service["port"],
                "last_check": datetime.now().strftime("%H:%M:%S")
            })

        except Exception as e:
            health_statuses.append({
                "service": service["name"],
                "status": "unhealthy",
                "response_time": "Error",
                "port": service["port"],
                "last_check": datetime.now().strftime("%H:%M:%S")
            })

    return health_statuses

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""

    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
    time_periods = {
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å": 1,
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤": 6,
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞": 24,
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π": 168
    }

    selected_period = st.sidebar.selectbox(
        "–ü–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏:",
        list(time_periods.keys()),
        index=2
    )
    hours = time_periods[selected_period]

    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    auto_refresh = st.sidebar.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=True)

    if auto_refresh:
        st.sidebar.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {REFRESH_INTERVAL} —Å–µ–∫—É–Ω–¥")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    stats = get_stats()
    traces_data = get_traces_count(hours)
    errors_data = get_errors_count(hours)
    errors_by_category = get_errors_count_by_category(hours)
    performance_data = get_performance_data(hours)
    services_data = get_services_summary(hours)
    # recent_errors —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
    recent_traces = get_recent_traces()
    security_violations = get_security_violations()
    security_violations_stats = get_security_violations_stats(hours)
    security_errors = get_security_errors()
    technical_errors = get_technical_errors()
    errors_stats = get_errors_stats(hours)
    services_health = get_services_health()

    # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
    st.subheader("üîç –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫")

    if recent_errors:
        df_errors = pd.DataFrame(recent_errors)

        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        search_term = st.text_input("–ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –æ–± –æ—à–∏–±–∫–∞—Ö:", placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ...")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
        if search_term:
            df_errors = df_errors[df_errors['error_message'].str.contains(search_term, case=False, na=False)]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        if not df_errors.empty:
            st.write(f"**–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫:** {len(df_errors)}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if len(df_errors) > 5:
                st.subheader("üö® –¢–æ–ø –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫")
                critical_errors = df_errors.head(5)
                for idx, error in critical_errors.iterrows():
                    with st.expander(f"üö® {error.get('service')} - {error.get('error_type')} - {error.get('timestamp', '')[:19]}", expanded=False):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**–°–µ—Ä–≤–∏—Å:** {error.get('service')}")
                            st.write(f"**–¢–∏–ø:** {error.get('error_type')}")
                            st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {error.get('category')}")
                        with col2:
                            st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {error.get('user_id', 'N/A')}")
                            st.write(f"**–í—Ä–µ–º—è:** {error.get('timestamp', '')[:19]}")

                        # –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        message = error.get('error_message', '')
                        if len(message) > 200:
                            st.write(f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {message[:200]}...")
                        else:
                            st.write(f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {message}")

                        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                        if error.get('trace_id'):
                            if st.button("üîç –ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å", key=f"quick_trace_{idx}"):
                                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–∞..."):
                                    full_trace = get_full_trace(error.get('trace_id'))
                                    if full_trace:
                                        show_full_trace_details(full_trace)
                                    else:
                                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–π—Å–∞")
        else:
            st.info("–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # –ê–ª–µ—Ä—Ç—ã –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
        st.subheader("üö® –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã")

        if recent_errors:
            df_errors = pd.DataFrame(recent_errors)

            alerts = []

            # –ê–ª–µ—Ä—Ç: –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
            if 'error_type' in df_errors.columns:
                error_counts = df_errors['error_type'].value_counts()
                for error_type, count in error_counts.items():
                    if count >= 5:  # –ü–æ—Ä–æ–≥ –¥–ª—è –∞–ª–µ—Ä—Ç–∞
                        alerts.append(f"‚ö†Ô∏è **–í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–∫–∏**: {error_type} ({count} —Ä–∞–∑)")

            # –ê–ª–µ—Ä—Ç: –û—à–∏–±–∫–∏ security
            if 'category' in df_errors.columns:
                security_errors_count = len(df_errors[df_errors['category'] == 'security'])
                if security_errors_count >= 3:
                    alerts.append(f"üîí **Security –∞–ª–µ—Ä—Ç**: {security_errors_count} security –æ—à–∏–±–æ–∫")

            # –ê–ª–µ—Ä—Ç: –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã –º–Ω–æ–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            if 'user_id' in df_errors.columns:
                affected_users = df_errors['user_id'].nunique()
                if affected_users >= 5:
                    alerts.append(f"üë• **–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**: {affected_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã")

            # –ê–ª–µ—Ä—Ç: –û—à–∏–±–∫–∏ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
            critical_services = ['api-gateway', 'security-service', 'monitoring-service']
            critical_errors = df_errors[df_errors['service'].isin(critical_services)] if 'service' in df_errors.columns else pd.DataFrame()
            if len(critical_errors) >= 3:
                alerts.append(f"üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã**: {len(critical_errors)} –æ—à–∏–±–æ–∫ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç—ã
            if alerts:
                for alert in alerts:
                    st.error(alert)
            else:
                st.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ - –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç")

    st.divider()

    # –°–µ–∫—Ü–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    st.subheader("üîí –ù–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    if security_violations_stats:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π", security_violations_stats.get('total_violations', 0))
        
        with col2:
            violations_by_type = security_violations_stats.get('violations_by_type', [])
            st.metric("–¢–∏–ø–æ–≤ –Ω–∞—Ä—É—à–µ–Ω–∏–π", len(violations_by_type))
        
        with col3:
            violations_by_service = security_violations_stats.get('violations_by_service', [])
            st.metric("–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤", len(violations_by_service))
        
        with col4:
            hourly_violations = security_violations_stats.get('hourly_violations', [])
            recent_violations = len([v for v in hourly_violations if v.get('count', 0) > 0])
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤", recent_violations)
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if security_violations:
        st.subheader("üö® –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        df_violations = pd.DataFrame(security_violations)
        if not df_violations.empty:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Ä—É—à–µ–Ω–∏–π
            display_cols = ['timestamp', 'service', 'error_type', 'error_message', 'user_id', 'session_id']
            available_cols = [col for col in display_cols if col in df_violations.columns]
            
            if available_cols:
                st.dataframe(
                    df_violations[available_cols].head(10),
                    use_container_width=True,
                    column_config={
                        "timestamp": st.column_config.DatetimeColumn("–í—Ä–µ–º—è", format="DD.MM.YYYY HH:mm:ss"),
                        "service": "–°–µ—Ä–≤–∏—Å",
                        "error_type": "–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è",
                        "error_message": st.column_config.TextColumn("–°–æ–æ–±—â–µ–Ω–∏–µ", width="large"),
                        "user_id": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                        "session_id": "–°–µ—Å—Å–∏—è",
                    }
                )
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Ä—É—à–µ–Ω–∏–π
            if len(df_violations) > 0:
                selected_violation_idx = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
                    range(len(df_violations.head(10))),
                    format_func=lambda x: f"{df_violations.iloc[x]['service']} - {df_violations.iloc[x]['error_type']} - {df_violations.iloc[x]['error_message'][:50]}...",
                    key="security_violation_select"
                )
                
                if selected_violation_idx is not None:
                    selected_violation = df_violations.iloc[selected_violation_idx]
                    show_detailed_security_violation(selected_violation)
    else:
        st.info("–ù–∞—Ä—É—à–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    st.divider()

    # –ü–∞–Ω–µ–ª—å Health Check –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    st.subheader("üîç –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")

    if services_health:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        cols = st.columns(len(services_health))

        for i, service in enumerate(services_health):
            with cols[i]:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if service["status"] == "healthy":
                    color = "üü¢"
                    bg_color = "#d4edda"  # —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
                else:
                    color = "üî¥"
                    bg_color = "#f8d7da"  # —Å–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π

                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–µ—Ä–≤–∏—Å–∞
                st.markdown(f"""
                <div style="
                    background-color: {bg_color};
                    padding: 10px;
                    border-radius: 8px;
                    text-align: center;
                    margin: 2px;
                    border: 1px solid #ddd;
                ">
                    <div style="font-size: 1.2em; margin-bottom: 5px;">{color}</div>
                    <div style="font-size: 0.8em; font-weight: bold;">{service['service']}</div>
                    <div style="font-size: 0.7em; color: #666;">:{service['port']}</div>
                    <div style="font-size: 0.7em; color: #666;">{service['response_time']}</div>
                    <div style="font-size: 0.6em; color: #999;">{service['last_check']}</div>
                </div>
                """, unsafe_allow_html=True)

    st.divider()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    if stats:
        col1, col2, col3, col4, col5 = st.columns(5)

        with col1:
            st.metric("–í—Å–µ–≥–æ –ª–æ–≥–æ–≤", f"{stats.get('total_logs', 0):,}")

        with col2:
            st.metric("–õ–æ–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è", f"{stats.get('logs_today', 0):,}")

        with col3:
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤", stats.get('active_services', 0))

        with col4:
            error_rate = stats.get('error_rate_24h', 0)
            st.metric("–û—à–∏–±–∫–∞ (%) –∑–∞ 24—á", f"{error_rate:.1f}")

        with col5:
            response_time = stats.get('avg_response_time', 0)
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{response_time:.2f}")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫
    if recent_errors:
        df_errors = pd.DataFrame(recent_errors)
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            security_count = len(df_errors[df_errors.get('category') == 'security']) if 'category' in df_errors.columns else 0
            st.metric("üîí Security –æ—à–∏–±–æ–∫", security_count)

        with col2:
            technical_count = len(df_errors[df_errors.get('category') == 'technical']) if 'category' in df_errors.columns else 0
            st.metric("‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫", technical_count)

        with col3:
            unique_services = df_errors['service'].nunique() if 'service' in df_errors.columns else 0
            st.metric("üè¢ –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤", unique_services)

        with col4:
            unique_users = df_errors['user_id'].nunique() if 'user_id' in df_errors.columns else 0
            st.metric("üë• –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", unique_users)

    st.divider()

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    if recent_errors:
        st.subheader("üö® –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")

        df_errors = pd.DataFrame(recent_errors)

        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
        col1, col2, col3 = st.columns(3)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        selected_service = "–í—Å–µ"
        selected_error_type = "–í—Å–µ"
        selected_category = "–í—Å–µ"

        with col1:
            if 'service' in df_errors.columns:
                selected_service = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Å–µ—Ä–≤–∏—Å—É:",
                    ["–í—Å–µ"] + sorted(df_errors['service'].unique().tolist())
                )

        with col2:
            if 'error_type' in df_errors.columns:
                selected_error_type = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏:",
                    ["–í—Å–µ"] + sorted(df_errors['error_type'].unique().tolist())
                )

        with col3:
            if 'category' in df_errors.columns:
                selected_category = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                    ["–í—Å–µ"] + sorted(df_errors['category'].unique().tolist())
                )

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_df = df_errors.copy()
        if selected_service != "–í—Å–µ":
            filtered_df = filtered_df[filtered_df['service'] == selected_service]
        if selected_error_type != "–í—Å–µ":
            filtered_df = filtered_df[filtered_df['error_type'] == selected_error_type]
        if selected_category != "–í—Å–µ":
            filtered_df = filtered_df[filtered_df['category'] == selected_category]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not filtered_df.empty:
            st.write(f"**–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫:** {len(filtered_df)}")

            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            st.dataframe(
                filtered_df[['timestamp', 'service', 'error_type', 'category', 'error_message', 'user_id', 'trace_id', 'request_id']].head(20),
                use_container_width=True,
                column_config={
                    "timestamp": st.column_config.DatetimeColumn("–í—Ä–µ–º—è", format="DD.MM.YYYY HH:mm:ss"),
                    "service": "–°–µ—Ä–≤–∏—Å",
                    "error_type": "–¢–∏–ø –æ—à–∏–±–∫–∏",
                    "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                    "error_message": st.column_config.TextColumn("–°–æ–æ–±—â–µ–Ω–∏–µ", width="large"),
                    "user_id": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    "trace_id": st.column_config.TextColumn("Trace ID", width="medium"),
                    "request_id": st.column_config.TextColumn("Request ID", width="medium"),
                }
            )

            # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            csv_data = filtered_df.to_csv(index=False)
            st.download_button(
                label="üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV",
                data=csv_data,
                file_name="error_analysis.csv",
                mime="text/csv",
                key="download_errors"
            )
        else:
            st.info("–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    st.divider()

    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º")

        if traces_data:
            df_traces = pd.DataFrame(traces_data)
            if not df_traces.empty:
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å—É –∏ —Å—Ç–∞—Ç—É—Å—É
                if 'service' in df_traces.columns and 'status' in df_traces.columns:
                    st.write("**–ó–∞–ø—Ä–æ—Å—ã –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:**")
                    service_status = df_traces.groupby(['service', 'status'])['count'].sum().reset_index()
                    for _, row in service_status.iterrows():
                        st.write(f"- {row['service']} ({row['status']}): {row['count']} –∑–∞–ø—Ä–æ—Å–æ–≤")
                else:
                    st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø—Ä–æ—Å–∞—Ö")
        else:
            st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö")

    with col2:
        st.subheader("üö® –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π")

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        tab1, tab2, tab3 = st.tabs(["üîí –ù–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏", "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

        with tab1:
            if security_violations_stats:
                st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
                violations_by_type = security_violations_stats.get('violations_by_type', [])
                if violations_by_type:
                    st.write("**–ù–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º:**")
                    for violation in violations_by_type:
                        st.write(f"- {violation.get('error_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {violation.get('count', 0)} —Å–ª—É—á–∞–µ–≤")

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
                violations_by_service = security_violations_stats.get('violations_by_service', [])
                if violations_by_service:
                    st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:**")
                    for violation in violations_by_service:
                        st.write(f"- {violation.get('service', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {violation.get('count', 0)} –Ω–∞—Ä—É—à–µ–Ω–∏–π")

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                hourly_violations = security_violations_stats.get('hourly_violations', [])
                if hourly_violations:
                    st.write("**–ù–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º:**")
                    for violation in hourly_violations:
                        hour = pd.to_datetime(violation.get('hour', '')).hour if violation.get('hour') else '–ù/–î'
                        count = violation.get('count', 0)
                        st.write(f"- {hour:02d}:00: {count} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

        with tab2:
            if errors_stats:
                st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫:**")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º
                errors_by_type = errors_stats.get('errors_by_type', [])
                if errors_by_type:
                    st.write("**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º:**")
                    for error in errors_by_type:
                        st.write(f"- {error.get('error_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {error.get('count', 0)} —Å–ª—É—á–∞–µ–≤")

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
                errors_by_service = errors_stats.get('errors_by_service', [])
                if errors_by_service:
                    st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:**")
                    for error in errors_by_service:
                        st.write(f"- {error.get('service', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {error.get('count', 0)} –æ—à–∏–±–æ–∫")
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö")

        with tab3:
            if errors_stats:
                st.write("**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫:**")
                
                # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫", errors_stats.get('total_errors', 0))
                
                with col2:
                    errors_by_category = errors_stats.get('errors_by_category', [])
                    security_count = sum(item['count'] for item in errors_by_category if item.get('category') == 'security')
                    st.metric("Security –æ—à–∏–±–æ–∫", security_count)
                
                with col3:
                    technical_count = sum(item['count'] for item in errors_by_category if item.get('category') == 'technical')
                    st.metric("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫", technical_count)
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                if errors_by_category:
                    st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**")
                    for category in errors_by_category:
                        st.write(f"- {category.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {category.get('count', 0)} –æ—à–∏–±–æ–∫")
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    st.subheader("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º")

    if performance_data:
        df_perf = pd.DataFrame(performance_data)
        if not df_perf.empty:
            col1, col2 = st.columns(2)

            with col1:
                if 'service' in df_perf.columns and 'avg_response_time' in df_perf.columns:
                    st.write("**–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:**")
                    for _, row in df_perf.iterrows():
                        st.write(f"- {row['service']}: {row.get('avg_response_time', 0):.2f} –º—Å")
                else:
                    st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")

            with col2:
                if 'service' in df_perf.columns and 'request_count' in df_perf.columns:
                    st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:**")
                    for _, row in df_perf.iterrows():
                        st.write(f"- {row['service']}: {row.get('request_count', 0)} –∑–∞–ø—Ä–æ—Å–æ–≤")
                else:
                    st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    else:
        st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –æ—à–∏–±–æ–∫
    st.subheader("üìã –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ—à–∏–±–æ–∫")

    if services_data:
        df_services = pd.DataFrame(services_data)
        if not df_services.empty:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö –≤ —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
            if recent_errors:
                df_errors = pd.DataFrame(recent_errors)

                # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–≤–æ–¥–∫—É
                services_summary = []
                for service in df_services['service'].unique():
                    service_data = df_services[df_services['service'] == service].iloc[0] if len(df_services[df_services['service'] == service]) > 0 else None
                    service_errors = df_errors[df_errors['service'] == service] if 'service' in df_errors.columns else pd.DataFrame()

                    summary = {
                        'service': service,
                        'total_requests': service_data['total_requests'] if service_data is not None else 0,
                        'successful_requests': service_data['successful_requests'] if service_data is not None else 0,
                        'failed_requests': service_data['failed_requests'] if service_data is not None else 0,
                        'avg_response_time': service_data['avg_response_time'] if service_data is not None else 0,
                        'error_rate': service_data['error_rate'] if service_data is not None else 0,
                        'total_errors': len(service_errors),
                        'security_errors': len(service_errors[service_errors.get('category') == 'security']) if 'category' in service_errors.columns else 0,
                        'technical_errors': len(service_errors[service_errors.get('category') == 'technical']) if 'category' in service_errors.columns else 0,
                        'unique_error_types': service_errors['error_type'].nunique() if 'error_type' in service_errors.columns else 0,
                        'affected_users': service_errors['user_id'].nunique() if 'user_id' in service_errors.columns else 0
                    }
                    services_summary.append(summary)

                df_extended_services = pd.DataFrame(services_summary)

                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫
                df_extended_services = df_extended_services.sort_values('total_errors', ascending=False)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                st.dataframe(
                    df_extended_services,
                    use_container_width=True,
                    column_config={
                        "service": st.column_config.TextColumn("–°–µ—Ä–≤–∏—Å", width="medium"),
                        "total_requests": st.column_config.NumberColumn("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", format="%d"),
                        "successful_requests": st.column_config.NumberColumn("–£—Å–ø–µ—à–Ω—ã—Ö", format="%d"),
                        "failed_requests": st.column_config.NumberColumn("–ù–µ—É–¥–∞—á–Ω—ã—Ö", format="%d"),
                        "avg_response_time": st.column_config.NumberColumn("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)", format="%.2f"),
                        "error_rate": st.column_config.NumberColumn("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫", format="%.2f%%"),
                        "total_errors": st.column_config.NumberColumn("–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫", format="%d"),
                        "security_errors": st.column_config.NumberColumn("üîí Security", format="%d"),
                        "technical_errors": st.column_config.NumberColumn("‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö", format="%d"),
                        "unique_error_types": st.column_config.NumberColumn("–¢–∏–ø–æ–≤ –æ—à–∏–±–æ–∫", format="%d"),
                        "affected_users": st.column_config.NumberColumn("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", format="%d"),
                    }
                )

                # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
                if len(df_extended_services) > 0:
                    st.subheader("üî• –¢–æ–ø —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫")
                    top_problematic = df_extended_services.head(10)

                    st.write("**–¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:**")
                    for _, row in top_problematic.iterrows():
                        st.write(f"- {row['service']}: {row['total_errors']} –æ—à–∏–±–æ–∫ ({row['error_rate']:.1f}%)")

            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–≤–æ–¥–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–∞—Ö
                st.dataframe(
                    df_services,
                    use_container_width=True,
                    column_config={
                        "service": "–°–µ—Ä–≤–∏—Å",
                        "total_requests": "–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
                        "successful_requests": "–£—Å–ø–µ—à–Ω—ã—Ö",
                        "failed_requests": "–ù–µ—É–¥–∞—á–Ω—ã—Ö",
                        "avg_response_time": st.column_config.NumberColumn(
                            "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)",
                            format="%.2f"
                        ),
                        "error_rate": st.column_config.NumberColumn(
                            "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫",
                            format="%.2f%%"
                        )
                    }
                )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–∏—Å–∞—Ö")
    else:
        st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º")

    # –ù–µ–¥–∞–≤–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–π—Å—ã")

        if recent_traces:
            df_traces = pd.DataFrame(recent_traces)
            if not df_traces.empty:
                # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–µ–π—Å–æ–≤
                display_cols = ['timestamp', 'service', 'operation', 'status', 'duration']
                available_cols = [col for col in display_cols if col in df_traces.columns]

                if available_cols:
                    st.dataframe(
                        df_traces[available_cols].head(5),
                        use_container_width=True
                    )
                else:
                    st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–π—Å–∞—Ö")
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–π—Å–∞—Ö")
        else:
            st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–π—Å—ã")

    with col2:
        st.subheader("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫")

        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        error_tab1, error_tab2, error_tab3, error_tab4 = st.tabs(["üîí –ù–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏", "üîí Security –æ—à–∏–±–∫–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

        with error_tab1:
            show_error_details(security_violations, "–Ω–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

        with error_tab2:
            show_error_details(technical_errors, "technical")

        with error_tab3:
            show_error_details(security_errors, "security")

        with error_tab4:
            show_error_statistics(recent_errors)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    st.divider()
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
        st.write(f"**–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {datetime.now().strftime('%H:%M:%S')}")
        st.write(f"**URL —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:** {MONITORING_SERVICE_URL}")
        st.write(f"**–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö:** {selected_period}")

    with col2:
        st.subheader("üîó –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏")
        st.markdown(f"[üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è]({MONITORING_SERVICE_URL}/docs)")
        st.markdown(f"[üè• Health Check]({MONITORING_SERVICE_URL}/health)")
        st.markdown("[üìà Swagger UI](http://localhost:8004/docs)")
        st.markdown("[üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ](#)")

    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if auto_refresh:
        time.sleep(REFRESH_INTERVAL)
        st.rerun()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
@st.cache_data(ttl=30)
def load_dashboard_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è dashboard"""
    try:
        recent_errors = get_recent_errors()
        stats = get_stats()
        services_data = get_services_summary()
        recent_traces = get_recent_traces()

        return recent_errors, stats, services_data, recent_traces
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return [], {}, [], []

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–µ
recent_errors, stats, services_data, recent_traces = load_dashboard_data()

if __name__ == "__main__":
    main()
